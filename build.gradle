plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'
    id 'jacoco'
    id 'codenarc'
    // Apply Gradle JPI plugin to simplify dependency management
    id 'org.jenkins-ci.jpi' version "0.40.0-rc.2"
    id 'nl.martijndwars.markdown' version '0.2.0' apply false

    // adds taskTree debug tool
    id "com.dorongold.task-tree" version "1.5"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.jenkins-ci.org/releases/' }
    jcenter()
}

allprojects {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Because this breaks things for some reason
configurations.all {
    exclude group: 'com.ibm.icu', module: 'icu4j'
}

sourceSets {
    // noinspection GroovyAssignabilityCheck
    main {
        groovy {
            srcDirs = ['src', 'vars']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        groovy {
            srcDirs = ['test/src', 'test/vars']
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}

compileGroovy {
    groovyOptions.configurationScript = file("config/groovyCompilerConfig.groovy")
    //horrible no-good hack to add groovy-cps to groovyClasspath
    groovyClasspath += sourceSets.main.compileClasspath

}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "com.cloudbees:groovy-cps:1.32@jar"
    // Folder
    implementation 'org.jenkins-ci.plugins:cloudbees-folder:6.1.2'

    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.4'
    //testRuntime "net.bytebuddy:byte-buddy:1.9.3"
    testRuntime 'cglib:cglib-nodep:3.3.0'

    //testImplementation "com.homeaway.devtools.jenkins:jenkins-spock:${jenkinsSpockVersion}"
    testImplementation 'ch.qos.logback:logback-core:1.2.3'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'javax.servlet:javax.servlet-api:4.0.1'
    testImplementation "org.jenkins-ci.main:jenkins-core:${jenkinsCoreVersion}"
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-cps:2.77'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-cps-global-lib:2.17'

    // provides basic steps like isUnix()
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-basic-steps:2.16'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.35'

    // provides sshagent() step
    testImplementation 'org.jenkins-ci.plugins:ssh-agent:1.16'

    // provides withAWS() step
    implementation "de.taimos:pipeline-aws:${pipelneAWSStepVersion}"

}

jenkinsPlugin {
    jenkinsVersion = jenkinsCoreVersion
}

/**
 * Global CodeNarc config
 */
codenarc {
    toolVersion = codenarcVersion
    ignoreFailures = !codenarcEnforce.toBoolean()
    configFile = file('config/codenarc.groovy')
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
}


/**
 * Run CodeNarcMain and display Report to console
 */
task codenarcMainReport {
    doLast {
        println file("${codenarc.reportsDir}/main.txt").text
    }
}

codenarcMain {
    finalizedBy codenarcMainReport
    reports {
        text.enabled = true
        html.enabled = true
        xml.enabled = true
    }

}

/**
 * Run CodeNarcTest and display Report to console
 */
task codenarcTestReport {
    doLast {
        println file("${codenarc.reportsDir}/test.txt").text
    }
}

codenarcTest {
    finalizedBy codenarcTestReport
    reports {
        text.enabled = true
        html.enabled = true
        xml.enabled = true
    }
}

//tasks.matching {}
tasks.named("codenarcTest") { shouldRunAfter("jacocoTestReport") }
tasks.named("codenarcMain") { shouldRunAfter("jacocoTestReport") }

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

test {
    // Single-threading this in case Spock ever decides to do parallel testing
    // we cannot support that due to Spock bugs
    maxParallelForks = 1
    systemProperties = ['root.loglevel': project.findProperty('testLogLevel') ?: 'ERROR',
                        'root.appender': 'Stdout',
                        'logdir'       : logdir]

    // Code Coverage Report
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = ['jdk.internal.*']
        excludeClassLoaders = []
        includeNoLocationClasses = true
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        //classDumpDir = file("$buildDir/classes/groovy/main")
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = true
    }
    finalizedBy jacocoTestReport
}

